---

---

<div id="chatBox" class="chat-box">
  <div class="chat-messages"></div>
  <div class="chat-input">
    <input type="text" id="messageInput" placeholder="Type your message..." />
    <button id="sendButton">Send</button>
  </div>
</div>

<style>
  .chat-box {
    position: fixed;
    bottom: 100px; /* Adjust as needed */
    right: 100px; /* Adjust as needed */
    width: 300px; /* Adjust as needed */
    height: 400px; /* Adjust as needed */
    background-color: #ffffff;
    border: 1px solid #ccc;
    color: #000;
    border-radius: 8px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    display: none; /* Initially hidden */
    padding: 10px;
    flex-direction: column;
  }
  .chat-messages {
    flex: 1; /* Takes remaining space */
    overflow-y: auto; /* Enable scrolling if messages overflow */
  }
  .chat-input {
    display: flex;
    align-items: center;
    margin-top: 10px;
  }

  .chat-input input[type="text"] {
    flex: 1;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  .chat-input button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 15px;
    margin-left: 5px;
    cursor: pointer;
  }

  .chat-input button:hover {
    background-color: #0056b3;
  }
</style>

<script is:inline type="module">
  import { marked } from "https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js";
  async function requestAnswers(message, callback) {
    const url = `http://localhost:8080/chat-with-gemi/gemi?message=${message}`;
    const options = {
      method: "GET",
      responseType: "stream",
    };

    try {
      fetch(url, options).then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        // Create a transform stream to convert Uint8Array to string
        const utf8Decoder = new TextDecoder("utf-8");
        const stream = response.body.pipeThrough(
          new TransformStream({
            async transform(chunk, controller) {
              // Convert Uint8Array chunk to string
              const stringChunk = utf8Decoder.decode(chunk);
              // Enqueue the string chunk
              controller.enqueue(stringChunk);
            },
          })
        );
        // Read from the stream
        const reader = stream.getReader();
        reader.read().then(function processText({ done, value }) {
          if (done) {
            console.log("Stream reading complete.");
            return;
          }
          // Process the chunk of data
          console.log(value); // Example: log the chunk of data to console
          callback(value);
          // Read the next chunk
          reader.read().then(processText);
        });
      });
    } catch (error) {
      console.error("Error fetching stream:", error);
    }
  }

  document.addEventListener("astro:page-load", () => {
    document
      .getElementById("sendButton")
      .addEventListener("click", async function () {
        var messageInput = document.getElementById("messageInput");
        var message = messageInput.value.trim();
        var chatMessages = document.querySelector(".chat-messages");

        if (message != "") {
          var huMessageContainer = document.createElement("div");
          huMessageContainer.classList.add("hu-message");
          var avatar = document.createElement("div");
          avatar.classList.add("avatar");
          avatar.innerHTML = '<i class="fas fa-user"></i>';
          huMessageContainer.appendChild(avatar);
          var messageElement = document.createElement("div");
          messageElement.classList.add("message");
          messageElement.textContent = message;
          huMessageContainer.appendChild(messageElement);
          chatMessages.appendChild(huMessageContainer);

          // Adjust the style of avatar and message
          huMessageContainer.style.display = "flex";
          huMessageContainer.style.flexDirection = "row";
          huMessageContainer.style.marginBottom = "4px";
          huMessageContainer.style.marginTop = "4px";
          avatar.style.width = "40px";
          avatar.style.height = "40px";
          avatar.style.fontSize = "24px";
          avatar.style.color = "#555";
          avatar.style.borderRadius = "50%";
          avatar.style.marginRight = "10px";

          messageElement.style.backgroundColor = "#f1f1f1";
          messageElement.style.padding = "10px";
          messageElement.style.borderRadius = "10px";
        }

        if (message !== "") {
          // Create the main container element for bot message
          var botMessageContainer = document.createElement("div");
          botMessageContainer.classList.add("bot-message");
          // Create the avatar element
          var avatar = document.createElement("div");
          avatar.classList.add("avatar");
          avatar.innerHTML = '<i class="fas fa-rocket"></i>';
          botMessageContainer.appendChild(avatar);
          var messageElement = document.createElement("div");
          messageElement.classList.add("message");
          botMessageContainer.appendChild(messageElement);
          chatMessages.appendChild(botMessageContainer);
          // Clear the input field

          botMessageContainer.style.display = "flex";
          botMessageContainer.style.flexDirection = "row";
          botMessageContainer.style.marginTop = "4px";
          avatar.style.width = "40px";
          avatar.style.height = "40px";
          avatar.style.fontSize = "24px";
          avatar.style.color = "#555";
          avatar.style.borderRadius = "50%";
          avatar.style.marginRight = "10px";

          messageElement.style.backgroundColor = "#f1f1f1";
          messageElement.style.padding = "10px";
          messageElement.style.borderRadius = "10px";
          messageInput.value = "";
          let stringBuffer = "";
          await requestAnswers(message, (message) => {
            stringBuffer += message;
            messageElement.innerHTML = marked.parse(stringBuffer);
          });
        }
      });
  });
</script>
